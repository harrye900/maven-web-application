name: Maven Package

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  package:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'maven'  # âœ… Improves performance by caching Maven dependencies

    - name: Build and test with Maven (with coverage)
      run: mvn -B clean test jacoco:report  # Run tests and generate coverage report
    
    - name: Display coverage summary
      run: |
        if [ -f target/site/jacoco/index.html ]; then
          echo "=== COVERAGE REPORT ==="
          echo "Instructions: $(grep -o 'Total[^<]*' target/site/jacoco/index.html | grep -o '[0-9]*%' | head -1 || echo 'N/A')"
          echo "Branches: $(grep -o 'Total[^<]*' target/site/jacoco/index.html | grep -o '[0-9]*%' | sed -n '2p' || echo 'N/A')"
          echo "Lines: $(grep -o 'Total[^<]*' target/site/jacoco/index.html | grep -o '[0-9]*%' | sed -n '3p' || echo 'N/A')"
          echo "Methods: $(grep -o 'Total[^<]*' target/site/jacoco/index.html | grep -o '[0-9]*%' | sed -n '4p' || echo 'N/A')"
          echo "Classes: $(grep -o 'Total[^<]*' target/site/jacoco/index.html | grep -o '[0-9]*%' | tail -1 || echo 'N/A')"
          echo "Full report available in artifacts"
        else
          echo "No coverage report found"
        fi
    
    - name: Package with Maven
      run: mvn -B package -DskipTests  # Package after tests

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/maven-web-app:latest .

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Push to Docker Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/maven-web-app:latest

    - name: Test Docker image
      run: |
        echo "Testing Docker image..."
        docker run -d -p 8080:8080 --name test-app ${{ secrets.DOCKER_USERNAME }}/maven-web-app:latest
        sleep 30
        curl -f http://localhost:8080 || echo "App not ready yet"
        docker logs test-app
        docker stop test-app
        docker rm test-app
        echo "Image available at: docker run -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/maven-web-app:latest"
        echo "Then browse to: http://localhost:8080"

    - name: Setup Minikube
      uses: medyagh/setup-minikube@master
      with:
        minikube-version: 1.32.0
        kubernetes-version: v1.28.3
        driver: docker

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy with Helm
      run: |
        helm upgrade --install maven-web-app ./helm-chart/maven-web-app \
          --set image.repository=${{ secrets.DOCKER_USERNAME }}/maven-web-app \
          --set image.tag=latest
        
        echo "Deployment initiated, checking status..."
        kubectl get pods
        kubectl get services
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=maven-web-app --timeout=300s || echo "Pods not ready in time"
        
        kubectl get pods
        minikube service maven-web-app --url || echo "Service URL not available"

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.DOCKER_USERNAME }}/maven-web-app:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: maven-artifacts
        path: target/
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: target/site/jacoco/
